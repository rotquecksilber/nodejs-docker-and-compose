name: Docker Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Clone repository on server
        run: |
          echo "$DEPLOY_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -i deploy_key.pem -o "StrictHostKeyChecking=no" ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} <<EOF
            git clone git@github.com:rotquecksilber/nodejs-docker-and-compose.git /home/${{ secrets.SERVER_USERNAME }}/nodejs-docker-and-compose
          EOF
        env:
          DEPLOY_KEY: ${{ secrets.SERVER_SSH_KEY }}

      - name: Build Backend Docker image
        run: docker build -t rotquecksilber/kupi_backend ./backend

      - name: Push Backend Docker image
        run: docker push rotquecksilber/kupi_backend

      - name: Build Frontend Docker image
        run: docker build -t rotquecksilber/kupi_frontend ./frontend

      - name: Push Frontend Docker image
        run: docker push rotquecksilber/kupi_frontend

      - name: Deploy to server
        run: |
          echo "$DEPLOY_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -i deploy_key.pem -o "StrictHostKeyChecking=no" ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} <<EOF
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_SYNCHRONIZE=${{ secrets.DB_SYNCHRONIZE }}
            export TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            export TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
            export PORT=${{ secrets.PORT }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_PGDATA=${{ secrets.POSTGRES_PGDATA }}
            cd /home/${{ secrets.SERVER_USERNAME }}/nodejs-docker-and-compose
            docker-compose pull
            docker-compose up -d
            docker image prune -f
          EOF
        env:
          DEPLOY_KEY: ${{ secrets.SERVER_SSH_KEY }}
